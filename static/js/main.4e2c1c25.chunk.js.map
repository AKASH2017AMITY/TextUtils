{"version":3,"sources":["component/About.js","component/Navbar.js","component/TextForm.js","component/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["About","_useState","useState","color","backgroundColor","_useState2","_slicedToArray","myStyle","setmyStyle","_useState3","_useState4","btnText","setBtnText","React","createElement","className","style","id","type","data-bs-toggle","data-bs-target","aria-expanded","aria-controls","aria-labelledby","data-bs-parent","onClick","border","Navbar","props","Fragment","concat","mode","Link","to","title","aria-label","aria-current","aboutText","toggleMode","htmlFor","TextForm","Text","setText","Heading","value","onChange","event","target","rows","newText","toUpperCase","showAlert","toLowerCase","split","toString","charAt","slice","length","defaultProps","Alert","alert","role","word","lower","captalize","msg","App","setMode","setAlert","message","setTimeout","Router","document","body","Routes","Route","exact","path","element","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.4e2c1c25.chunk.js","sourcesContent":["import React, {useState}from 'react';\r\n\r\nexport default function About() {\r\n\r\n    const [myStyle, setmyStyle] = useState({\r\n        color: 'black',\r\n        backgroundColor: 'white'\r\n    })\r\n\r\n    const [btnText, setBtnText] = useState(\"Enable Light Mode\")\r\n\r\n    const changeMode = () => {\r\n       if(myStyle.color === \"black\") {\r\n        setmyStyle({\r\n            color: 'white',\r\n            backgroundColor: 'black',\r\n            border: '1px solid white'\r\n        })\r\n        setBtnText(\"Enable Dark Mode\")\r\n        \r\n       }\r\n       else {\r\n        setmyStyle({\r\n            color: 'black',\r\n            backgroundColor: 'white'\r\n        })\r\n        setBtnText(\"Enable Light Mode\")\r\n       }\r\n    }\r\n\r\n\r\n    return (\r\n        <div className='container my-4' style={myStyle}>\r\n            <h1 className=\"my-3\">About Us</h1>\r\n            <div className=\"accordion\" id=\"accordionExample\">\r\n                <div className=\"accordion-item\">\r\n                    <h2 className=\"accordion-header\" id=\"headingOne\">\r\n                        <button className=\"accordion-button\" style={myStyle} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseOne\" aria-expanded=\"true\" aria-controls=\"collapseOne\">\r\n                            Accordion Item #1\r\n                        </button>\r\n                    </h2>\r\n                    <div id=\"collapseOne\" className=\"accordion-collapse collapse show\" aria-labelledby=\"headingOne\" data-bs-parent=\"#accordionExample\">\r\n                        <div className=\"accordion-body\" style={myStyle}>\r\n                            <strong>This is the first item's accordion body.</strong> It is shown by default, until the collapse plugin adds the appropriate classNamees that we use to style each element. These classNamees control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"accordion-item\">\r\n                    <h2 className=\"accordion-header\" id=\"headingTwo\">\r\n                        <button className=\"accordion-button collapsed\" style={myStyle} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseTwo\" aria-expanded=\"false\" aria-controls=\"collapseTwo\">\r\n                            Accordion Item #2\r\n                        </button>\r\n                    </h2>\r\n                    <div id=\"collapseTwo\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingTwo\" data-bs-parent=\"#accordionExample\">\r\n                        <div className=\"accordion-body\" style={myStyle}>\r\n                            <strong>This is the second item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classNamees that we use to style each element. These classNamees control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"accordion-item\">\r\n                    <h2 className=\"accordion-header\" id=\"headingThree\">\r\n                        <button className=\"accordion-button collapsed\" style={myStyle} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseThree\" aria-expanded=\"false\" aria-controls=\"collapseThree\">\r\n                            Accordion Item #3\r\n                        </button>\r\n                    </h2>\r\n                    <div id=\"collapseThree\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingThree\" data-bs-parent=\"#accordionExample\">\r\n                        <div className=\"accordion-body\" style={myStyle}>\r\n                            <strong>This is the third item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classNamees that we use to style each element. These classNamees control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"container my-3 \">\r\n                <button onClick={changeMode} className='btn btn-primary' type='button'>{btnText}</button>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\nexport default function Navbar(props) {\r\n  return (\r\n    <>\r\n      <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n        <div className=\"container-fluid\">\r\n          <Link className=\"navbar-brand\" to=\"/\">\r\n            {props.title}\r\n          </Link>\r\n          <button\r\n            className=\"navbar-toggler\"\r\n            type=\"button\"\r\n            data-bs-toggle=\"collapse\"\r\n            data-bs-target=\"/navbarSupportedContent\"\r\n            aria-controls=\"navbarSupportedContent\"\r\n            aria-expanded=\"false\"\r\n            aria-label=\"Toggle navigation\"\r\n          >\r\n            <span className=\"navbar-toggler-icon\"></span>\r\n          </button>\r\n          <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n            <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n              <li className=\"nav-item\">\r\n                <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">\r\n                  Home\r\n                </Link>\r\n              </li>\r\n              <li className=\"nav-item\">\r\n                <Link className=\"nav-link\" to=\"/about\">\r\n                  {props.aboutText}\r\n                </Link>\r\n              </li>\r\n            </ul>\r\n            {/* <form className=\"d-flex\">\r\n              <input\r\n                className=\"form-control me-2\"\r\n                type=\"search\"\r\n                placeholder=\"Search\"\r\n                aria-label=\"Search\"\r\n              />\r\n              <button className=\"btn btn-outline-success\" type=\"submit\">\r\n                Search\r\n              </button> \r\n            </form> */}\r\n            <div className={`form-check form-switch text-${props.mode=== \"light\"?\"dark\":\"light\"}`}>\r\n              <input className=\"form-check-input\" onClick ={props.toggleMode} type=\"checkbox\"  id=\"flexSwitchCheckDefault\" />\r\n              <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable dark Mode</label>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </nav>\r\n    </>\r\n  );\r\n}\r\n\r\nNavbar.propTypes = {\r\n    title: PropTypes.string.isRequired,\r\n    aboutText: PropTypes.string\r\n}\r\n\r\nNavbar.defaultProps = {\r\n    title: \"Set Title here\",\r\n    aboutText: \"About text here\"\r\n\r\n}\r\n","import React, {useState} from \"react\";\r\n\r\nexport default function TextForm(props) {\r\n    const [Text, setText ] = useState('');\r\n\r\n    const handleUpClick =()=> {\r\n        //console.log(\"UpperCase was Clicked \"+ {Text})\r\n        let newText = Text.toUpperCase();\r\n        setText(newText);\r\n        props.showAlert(\"Converted to UpperCase!\", \"success\");\r\n    }\r\n    const handleLowClick =()=> {\r\n        //console.log(\"UpperCase was Clicked \"+ {Text})\r\n        let newText = Text.toLowerCase();\r\n        setText(newText);\r\n        props.showAlert(\"Converted to LowerCase!\", \"success\");\r\n    }\r\n    const handleClearClick =()=> {\r\n        //console.log(\"UpperCase was Clicked \"+ {Text})\r\n        let newText = \"\";\r\n        setText(newText);\r\n        props.showAlert(\"Clear Text!\", \"success\");\r\n    }\r\n    const handleTitleCase =()=> {\r\n        // let len \r\n        let newText= Text.split(\" \");;\r\n        newText= newText.toString().charAt(0).toUpperCase() + newText.toString().slice(1).toLowerCase() ;\r\n        \r\n    //     for(let i=0;i<=len;i++){\r\n            \r\n    //    }\r\n        setText(newText); \r\n        props.showAlert(\"Converted to TitleCase!\", \"success\");\r\n       \r\n        \r\n    }\r\n\r\n    const handleOnChange = (event) => {\r\n        //console.log(\"On Change\");\r\n        setText(event.target.value)\r\n    }\r\n\r\n  return (\r\n    <>\r\n        <div className=\"container\"  style={{color: props.mode=== \"dark\"?\"white\":\"black\"}}>\r\n            <h1>{props.Heading}</h1>\r\n            <div className =\"mb-3\">\r\n                <textarea className=\"form-control\" id=\"myBox\" style={{backgroundColor: props.mode=== \"dark\"?\"grey\":\"white\", color: props.mode=== \"dark\"?\"white\":\"black\"}} value={Text} onChange={handleOnChange} rows=\"9\"></textarea>\r\n            </div>\r\n            <button className=\"btn btn-primary mx-0\" onClick={handleUpClick}>Convert to UpperCase</button>\r\n            <button className=\"btn btn-primary mx-2\" onClick={handleLowClick}>Convert to LowerCase</button>\r\n            <button className=\"btn btn-primary mx-2\" onClick={handleClearClick}>Clear Text</button>\r\n            <button className=\"btn btn-primary mx-2\" onClick={handleTitleCase}>Title Case</button>\r\n        </div>\r\n        <div className=\"container my-2\" style={{color: props.mode=== \"dark\"?\"white\":\"black\"}}>\r\n            <h2>Your Text Summary</h2>\r\n            <p>{Text.split(\" \").length} Words and {Text.length} Characters</p>\r\n            <p>{0.008 * Text.split(\" \").length} Reading Time in Minutes</p>\r\n            <h2>Preview</h2>\r\n            <p>{Text.length>0?Text:\"Enter your Text in above textbox for preview\"}</p>\r\n        </div>\r\n    </>\r\n  );\r\n}\r\n","import React from 'react'\r\n\r\nfunction Alert(props) {\r\n\r\n    const captalize = (word)=> {\r\n        const lower = word.toLowerCase()\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n    }\r\n  return (\r\n   \r\n    props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n        <strong>{captalize(props.alert.type)}</strong>: {props.alert.msg}\r\n       \r\n    </div>\r\n   \r\n  )\r\n}\r\n\r\nexport default Alert\r\n","import React, { useState } from \"react\";\nimport \"./App.css\";\n import About from \"./component/About\";\nimport Navbar from \"./component/Navbar\";\nimport TextForm from \"./component/TextForm\";\nimport Alert from \"./component/Alert\";\nimport { BrowserRouter as Router, Routes, Route } from \"react-router-dom\";\n\nfunction App() {\n  \n  const [mode, setMode ] = useState('light'); // whether Dark Mode is enable or not\n  const [alert, setAlert ] = useState(null); // whether Dark Mode is enable or not\n\n  const showAlert = (message,type)=> {\n    setAlert({\n      msg: message,\n      type: type\n    })\n\n    setTimeout(() => {\n      setAlert(null)\n      \n    }, 1500);\n  }\n\n  const toggleMode = ()=> {\n    if(mode === \"light\") {\n      setMode(\"dark\");\n      document.body.style.backgroundColor = 'grey';\n      showAlert(\"Dark mode has been Enabled\", \"success\");\n      document.title = \"TextUtils -Dark Mode\";\n      // setInterval(() => {\n      //   document.title = \"TextUtils -Dark Mode\";\n      // },2000)\n      // setInterval(() => {\n      //   document.title = \"Install TextUtils Now\";\n      // },1500)\n    }\n    else {\n      setMode(\"light\");\n      document.body.style.backgroundColor = 'white';\n      showAlert(\"Light mode has been Enabled\", \"success\");\n      document.title = \"TextUtils -Light Mode\";\n    }\n    \n\n  }\n  return (\n    <>\n    <Router>\n      <Navbar title=\"TextUtils\" aboutText=\"About TextUtils\" mode={mode} toggleMode={toggleMode}/>\n      <Alert alert={alert}/>\n      <div className=\"container my-3\">\n        <Routes>\n          <Route exact path=\"/about\" element={<About />} />\n            \n          \n          <Route path=\"/\" element={ <TextForm showAlert={showAlert} Heading=\"Enter your Text for analyze\" mode={mode}/> } />\n           \n          \n        </Routes>\n        \n      </div>\n      \n    </Router>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n\nreportWebVitals();\n"],"sourceRoot":""}